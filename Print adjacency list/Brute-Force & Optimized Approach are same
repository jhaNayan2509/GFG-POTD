/*
JAVA Simple Approach:

1. Inside the "printGraph" method, a new ArrayList of ArrayLists is created and assigned to the variable "graph". This list will represent a graph.

2. A for loop is used to initialize each element of the graph with an empty ArrayList.
The loop runs for "V" iterations, where "V" is the number of vertices in the graph. This step ensures that all vertices have an empty list initially.

3. Another for-each loop is used to iterate over each edge in the "edges" array. The loop variable "i" represents an individual edge.

4. Within the loop, the code retrieves the source and destination vertices of the current edge from "i[0]" and "i[1]" respectively. 
The graph is represented as a list of lists, where the inner list at index "i[0]" stores all the adjacent vertices of vertex "i[0]". 
Similarly, the inner list at index "i[1]" stores all the adjacent vertices of vertex "i[1]". 
Therefore, the code adds "i[1]" to the list at index "i[0]" and vice versa to account for the bidirectional nature of the graph.

5. Finally, the "graph" list is returned as the output of the "printGraph" method.

T.C.: O(V + E) where V is the total number of vertices and E is the total number of edges as we are looping all the vertices along with its edges.
S.C.: O(V + E) as the size of the new adjacency list will be the total number of vertices V and total number of edges E. 
*/

class Solution {
    public List<List<Integer>> printGraph(int V, int edges[][]) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i[] : edges) {
            graph.get(i[0]).add(i[1]);
            graph.get(i[1]).add(i[0]);
        }
        return graph;
    }
}








