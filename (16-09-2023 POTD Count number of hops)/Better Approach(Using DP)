/*
Java Simple Approach:

Basic Idea:
The approach starts by initializing the table(dp array) with base case values.
Then, it iteratively computes the solutions for all possible subproblems in a bottom-up manner, using the solutions of previously solved subproblems. 
We build the table from the smallest subproblem to the main problem and avoid the overhead of calling recursive function repeatedly.




T.C.:  O(n), as we iterate through the loop n times, and each iteration involves constant-time operations
S.C.:  O(n), as we use a dp array of size n + 1 to store intermediate results.
*/
class Solution
{
    //Function to count the number of ways in which frog can reach the top.
    static long countWays(int n)
    {
        if(n<=2) return n;
        if(n==3) return n+1;
        long mod = 1000000007;
        long[] dp = new long[n+1];
        
        dp[1]=1;
        dp[2]=2;
        dp[3]=4;
        
        int i=4;
        
        while(i<=n){
            dp[i]=(dp[i-1]+dp[i-2]+dp[i-3])%mod;
            i++;
        }
        return dp[n]%mod;
    }
    
}
