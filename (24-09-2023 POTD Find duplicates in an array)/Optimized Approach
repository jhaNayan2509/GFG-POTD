/*
Java Simple Approach:

Basic Idea: The idea in this is use the values of the array elements as indices and mark those indices by adding n(array size) to those indices.
By doing this, we can identify elements that have been encountered more than once.

1.First, it modifies the array by adding the size of the array (n) to the value at the index calculated using the modulo operator. 
This step is performed in a while loop that iterates through the array.
The purpose of this step is to mark the elements that have been encountered before by making their values greater than or equal to 2*n.

2.After modifying the array, the code iterates through it again and checks if any element's value divided by n is greater than or equal to 2. 
If it is, it means that the element has occurred more than once and is considered a duplicate. The index of the duplicate element is added to the ArrayList.

3.Finally, the code checks if the ArrayList is empty. If it is, it means no duplicates were found, so it adds -1 to the ArrayList before returning it.




T.C.:  O(N), As it iterates through the given array twice, once for marking indices and once for checking duplicates. 
Both iterations have a O(n) time complexity, So total time complexity becomes O(n).
S.C.:  O(N), As in the worst case there can be n/2 elements which are repeating so space complexity becomes O(n).

Note: As per the question,The extra space is considered only for the arraylist which we will return.
*/

class Solution {
    public static ArrayList<Integer> duplicates(int arr[], int n) {
        ArrayList<Integer> al = new ArrayList<>();
        
        int i=0;
        
        while(i!=n){
            int idx = arr[i]%n;
            
            arr[idx]+=n;
            i++;
        }
        
        i=0;
        
        while(i!=n){
            if(arr[i]/n>=2){
                al.add(i);
            }
            i++;
        }
        
        if(al.isEmpty()){
            al.add(-1);
            return al;
        }
        return al;
    }
}
